datasource db {
  provider = "mysql" // Gantilah sesuai dengan database yang digunakan
  url      = env("DATABASE_URL") // Pastikan variabel ini ada di file .env
}

generator client {
  provider = "prisma-client-js"
}

model Cart {
  id        String   @id @default(uuid())
  userId    String
  productId String
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@unique([userId, productId]) // Unique constraint on userId and productId combination
}

model User {
  id           String        @id @default(uuid())
  name         String
  email        String        @unique
  password     String
  role         Role          @default(user)
  phone        String?
  address      String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  products     Product[] // Produk yang dijual oleh pengguna (seller)
  orders       Order[] // Pesanan yang dilakukan oleh pengguna
  cart         Cart[] // Keranjang belanja pengguna
  transactions Transaction[] // Riwayat transaksi pengguna
}

model Transaction {
  id        String        @id @default(uuid())
  userId    String
  orderId   String        @unique
  amount    Float
  status    PaymentStatus
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  user  User  @relation(fields: [userId], references: [id])
  order Order @relation(fields: [orderId], references: [id])
}

model Order {
  id          String       @id @default(uuid())
  totalAmount Float
  status      OrderStatus
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  buyer       User         @relation(fields: [buyerId], references: [id])
  buyerId     String
  orderItems  OrderItem[] // Item produk dalam pesanan
  payment     Payment? // Pembayaran terkait pesanan
  shipping    Shipping? // Pengiriman terkait pesanan
  transaction Transaction? // Transaksi yang terkait dengan pesanan
}

model OrderItem {
  id        String  @id @default(uuid())
  quantity  Int
  price     Float
  product   Product @relation(fields: [productId], references: [id])
  productId String
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   String
}

model Product {
  id           String         @id @default(uuid())
  name         String
  description  String
  price        Float
  stock        Int
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  seller       User           @relation(fields: [sellerId], references: [id])
  sellerId     String
  category     Category       @relation(fields: [categoryId], references: [id])
  categoryId   Int
  orderItems   OrderItem[] // Item pesanan terkait produk
  cartItems    Cart[] // Produk yang ada dalam keranjang
  StockHistory StockHistory[]
}

model StockHistory {
  id        String   @id @default(uuid())
  productId String
  change    Int // Nilai perubahan stok (positif untuk penambahan, negatif untuk pengurangan)
  reason    String // Alasan perubahan, misalnya "restock" atau "sale"
  createdAt DateTime @default(now())

  product Product @relation(fields: [productId], references: [id])
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String
  description String
  products    Product[] // Daftar produk dalam kategori
}

model Payment {
  id            String        @id @default(uuid())
  amount        Float
  paymentMethod PaymentMethod
  status        PaymentStatus
  createdAt     DateTime      @default(now())
  order         Order         @relation(fields: [orderId], references: [id])
  orderId       String        @unique // Memastikan hanya satu pembayaran untuk setiap order
}

model Shipping {
  id             String         @id @default(uuid())
  trackingNumber String
  status         ShippingStatus
  shippingDate   DateTime       @default(now())
  deliveryDate   DateTime?
  order          Order          @relation(fields: [orderId], references: [id])
  orderId        String         @unique
}

enum PaymentMethod {
  credit_card
  bank_transfer
  cash_on_delivery
}

enum PaymentStatus {
  pending
  completed
  failed
}

enum ShippingStatus {
  pending
  shipped
  delivered
}

enum OrderStatus {
  pending
  paid
  shipped
  delivered
  canceled
}

enum Role {
  user
  seller
  admin
}
